#配置用户和用户组
user www www;

#设置值和CPU核心数一致
worker_processes 2; 

#全局日志位置和日志级别，日志等级从低到高依次为：debug | info | notice | warn | error | crit
error_log /usr/local/webserver/nginx/logs/nginx_error.log crit;

#记录主进程id的文件
pid /usr/local/webserver/nginx/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process.
#一个进程能打开的文件描述符最大值，理论上该值因该是最多能打开的文件数除以进程数。但是由于nginx负载并不是完全均衡的，
#所以这个值最好等于最多能打开的文件数。执行 sysctl -a | grep fs.file 可以看到linux文件描述符。
worker_rlimit_nofile 65535;
events{
	use epoll;
	worker_connections 65535;
}
#设定http服务器，利用它的反向代理功能提供负载均衡支持
http{
	#文件扩展名与文件类型映射表
	include mime.types;
	#默认文件类型
	default_type application/octet-stream;
	#日志格式
	log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
	       '$status $body_bytes_sent "$http_referer" '
	       '"$http_user_agent" $http_x_forwarded_for';
  
	#access_log 记录了哪些用户，那些页面以及用户浏览器、ip和其它的访问信息
	access_log /usr/local/webserver/nginx/logs/access.log main;
	
	#设置字符编码集
	charset utf-8;
     
	#服务器名字的hash表大小
	server_names_hash_bucket_size 128;
	
	#客户端请求头缓存大小，nginx默认用client_header_buffer_size这个buffer来读取header值
	#如果header过大，它会使用large_client_header_buffer来读取
	#如果设置小Http头、cookie过大，会报400错误nginx 400 bad request
	#如果超过buffer，就会报http 414错误（url too long）
	#nginx接受最长的HTTP头部大小必须比其中一个buffer大，否则就会报400的HTTP错误(Bad Request)。
	client_header_buffer_size 32k;
	large_client_header_buffers 4 32k;
	#客户端请求体的大小
	client_max_body_size 8m;

	#开启文件传输，一般应用都应设置为on；若是有下载的应用，则可以设置成off来平衡网络I/O和磁盘的I/O来降低系统负载
	sendfile on;
	#告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。
	tcp_nopush on;
	#连接超时时间，
	keepalive_timeout 60;
	#告诉nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，
	#这样发送一小块数据信息时就不能立即得到返回值。
	tcp_nodelay on;
	fastcgi_connect_timeout 300;
	fastcgi_send_timeout 300;
	fastcgi_read_timeout 300;
	fastcgi_buffer_size 64k;
	fastcgi_buffers 4 64k;
	fastcgi_busy_buffers_size 128k;
	fastcgi_temp_file_write_size 128k;
	#gzip模块设置，使用 gzip 压缩可以降低网站带宽消耗，同时提升访问速度。
	gzip on; #开启gzip
	gzip_min_length 1k; #最小压缩大小
	gzip_buffers 4 16k; #压缩缓冲区
	gzip_http_version 1.0; #压缩版本
	gzip_comp_level 2; #压缩等级
	gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型
	gzip_vary on;
 
	#upstream作负载均衡，在此配置需要轮询的服务器地址和端口号，max_fails为允许请求失败的次数，默认为1.
	upstream linux.insonspider.cn{
		server 39.108.91.80:8080 max_fails=0 weight=1;

	}

	#limit_zone crawler $binary_remote_addr 10m;
	#下面是server虚拟主机的配置
	server{
		listen 80;#监听端口
		server_name linux.insonspider.cn;#域名
		#index index.html index.htm index.php;
		#root /usr/local/webserver/nginx/html;#站点目录
		#单独的access_log文件
		access_log logs/39.108.91.80.access.log main;

		#location ~ .*\.(php|php5)?${
		#	fastcgi_pass unix:/tmp/php-cgi.sock;
		#	fastcgi_pass 127.0.0.1:9000;
		#	fastcgi_index index.php;
		#	include fastcgi.conf;
		#}
		#access_log off;

		#反向代理配置，将所有请求为http://hostname的请求全部转发到upstream中定义的目标服务器中。
		location / {
			#此处配置的域名必须与upstream的域名一致，才能转发。
			proxy_pass     http://linux.insonspider.cn;
			proxy_set_header   X-Real-IP $remote_addr;
		}
		#location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)?$ {
		#	proxy_pass     http://hostname;
		#	proxy_set_header   X-Real-IP $remote_addr;
		#	#expires 30d;
		#	#access_log off;
		#}
		#location ~ .*\.(js|css)?$ {
		#	proxy_pass     http://hostname;
		#	proxy_set_header   X-Real-IP $remote_addr;
		#	#expires 15d;
		#	#access_log off;
		#}
		#启用nginx status 监听页面
		location /nginxstatus {
			stub_status on;
			access_log on;
		}
	}
}